{
  "extends": [
    "airbnb",
    "next/core-web-vitals",
    "prettier",
    "plugin:prettier/recommended" // Enables eslint-plugin-prettier and eslint-config-prettier. This will display prettier errors as ESLint errors. Make sure this is always the last configuration in the extends array.
  ],
  "parserOptions": {
    // "ecmaVersion": 2018, // Allows for the parsing of modern ECMAScript features
    // "sourceType": "module" // Allows for the use of imports
    "project": ["tsconfig.json", "./scripts/tsconfig.json", "./cypress/tsconfig.json"],
    "tsconfigRootDir": "."
  },
  "rules": {
    "padding-line-between-statements": [
      "error",
      { "blankLine": "always", "prev": "*", "next": ["return", "export", "block-like"] },
      { "blankLine": "always", "prev": ["const", "let", "var", "block-like"], "next": "*" },
      { "blankLine": "any", "prev": ["const", "let", "var", "export"], "next": ["const", "let", "var", "export"] },
      { "blankLine": "never", "prev": ["*"], "next": ["case"] }
    ],
    "array-bracket-newline": ["error", { "multiline": true }], // enforce linebreaks after opening and before closing array brackets
    "arrow-body-style": "off", // not require braces around arrow function bodies
    "arrow-spacing": "error", // enforce consistent spacing before and after the arrow in arrow functions
    "block-scoped-var": "error", // enforce the use of variables within the scope they are defined
    "camelcase": "off", // FIX
    "comma-dangle": ["error", "always-multiline"], // require or disallow trailing commas
    "comma-style": "error", // enforce consistent comma style
    "curly": ["error", "all"], // enforce consistent brace style for all control statements
    "eol-last": "error", // require or disallow newline at the end of files
    "eqeqeq": "error", // equire the use of === and !==
    "generator-star-spacing": ["error", "after"], // enforce consistent spacing around * operators in generator functions
    "import/extensions": ["error", "ignorePackages", { "js": "never", "jsx": "never", "ts": "never", "tsx": "never" }],
    "import/order": ["error", { "groups": ["builtin", "external", "internal"], "newlines-between": "always" }],
    "import/prefer-default-export": "off",
    "jsx-a11y/anchor-is-valid": "off", //FIX
    "key-spacing": "error", // enforce consistent spacing between keys and values in object literal properties
    "keyword-spacing": "error", // enforce consistent spacing before and after keywords
    "lines-between-class-members": ["error", "always", { "exceptAfterSingleLine": true }],
    "max-classes-per-file": ["error", 1], // enforce a maximum number of classes per file
    "max-len": ["error", { "code": 120, "tabWidth": 2 }],
    "new-parens": "error", // enforce or disallow parentheses when invoking a constructor with no arguments
    "no-alert": "warn", // disallow the use of alert, confirm, and prompt
    "no-bitwise": "warn", // disallow bitwise operators
    "no-case-declarations": "off",
    "no-confusing-arrow": "off", // FIX
    "no-console": "error", // disallow the use of console
    "no-duplicate-imports": ["error", { "includeExports": true }], // disallow duplicate module imports
    "no-else-return": ["error", { "allowElseIf": false }], // disallow else blocks after return statements in if statements
    "no-implicit-coercion": "error", // disallow shorthand type conversions
    "no-labels": "error", // disallow labeled statements
    "no-lone-blocks": "error", // disallow unnecessary nested blocks
    "no-lonely-if": "warn", // disallow if statements as the only statement in else blocks
    "no-multi-spaces": "error", // disallow multiple spaces
    "no-multiple-empty-lines": "error", // disallow multiple empty lines
    "no-nested-ternary": "error", // disallow nested ternary expressions
    "no-new-func": "error", // disallow new operators with the Function object
    "no-new-object": "error", // disallow Object constructors
    "no-new-wrappers": "error", // disallow new operators with the String, Number, and Boolean objects
    "no-new": "error", // disallow new operators outside of assignments or comparisons
    "no-param-reassign": ["error", { "props": false }],
    "no-plusplus": ["error", { "allowForLoopAfterthoughts": true }],
    "no-prototype-builtins": "off", //FIX
    "no-restricted-syntax": "off", //FIX
    "no-return-await": "error", // disallow unnecessary return await
    "no-self-compare": "error", // disallow comparisons where both sides are exactly the same
    "no-sequences": "error", // disallow comma operators
    "no-shadow": "off", // FIX
    // "no-shadow": ["error", { "builtinGlobals": true }], // disallow variable declarations from shadowing variables declared in the outer scope
    "no-tabs": ["error", { "allowIndentationTabs": true }], // disallow all tabs
    // "no-tabs": "off",
    "no-template-curly-in-string": "error", // disallow template literal placeholder syntax in regular strings
    "no-throw-literal": "error", // disallow throwing literals as exceptions
    "no-trailing-spaces": "error", // disallow trailing whitespace at the end of lines
    "no-undefined": "off", // disallow the use of undefined as an identifier
    "no-unneeded-ternary": "error", // disallow ternary operators when simpler alternatives exist
    "no-unused-expressions": "off", // disallow unused expressions
    "no-use-before-define": [0],
    "no-useless-call": "error", // disallow unnecessary calls to .call() and .apply()
    "no-useless-computed-key": "error", // disallow unnecessary computed property keys in object literals
    "no-useless-concat": "error", // disallow unnecessary concatenation of literals or template literals
    "no-useless-rename": "error", // disallow renaming import, export, and destructured assignments to the same name
    "no-useless-return": "error", // disallow redundant return statements
    "no-whitespace-before-property": "error", // disallow whitespace before properties
    "object-curly-spacing": ["error", "always"], // enforce consistent spacing inside braces
    "object-shorthand": ["error", "always"], // require or disallow method and property shorthand syntax for object literals
    "prefer-arrow-callback": "warn", // require using arrow functions for callbacks
    "prefer-destructuring": "error", // require destructuring from arrays and/or objects
    "prefer-promise-reject-errors": "error", // require using Error objects as Promise rejection reasons
    "prettier/prettier": ["error"],
    "radix": "error", // enforce the consistent use of the radix argument when using parseInt()
    "rest-spread-spacing": ["error", "never"], // enforce spacing between rest and spread operators and their expressions
    "semi-spacing": "error", // enforce consistent spacing before and after semicolons
    "space-before-blocks": "error", // enforce consistent spacing before blocks
    "space-before-function-paren": ["error", { "anonymous": "always", "named": "never", "asyncArrow": "always" }], // enforce consistent spacing before function definition opening parenthesis
    "space-in-parens": "error", // enforce consistent spacing inside parentheses
    "space-infix-ops": "error", // require spacing around infix operators
    "space-unary-ops": "error", // enforce consistent spacing before or after unary operators
    "spaced-comment": ["error", "always"], // enforce consistent spacing after the // or /* in a comment
    "switch-colon-spacing": "error", // enforce spacing around colons of switch statements
    "template-curly-spacing": "error", // require or disallow spacing around embedded expressions of template strings
    "react/destructuring-assignment": "off", //FIX
    "react/jsx-curly-newline": "off",
    "react/jsx-filename-extension": ["error", { "extensions": [".tsx"] }],
    "react/jsx-key": "error",
    "react/jsx-no-bind": "error", // Prevent usage of .bind() and arrow functions in JSX props
    "react/jsx-no-literals": "off", //  Prevent usage of unwrapped JSX strings
    "react/jsx-no-useless-fragment": "error", // Disallow unnecessary fragments,
    "react/jsx-one-expression-per-line": "off", //FIX
    "react/jsx-pascal-case": "error", // Enforce PascalCase for user-defined JSX components
    "react/jsx-props-no-spreading": "off",
    "react/jsx-wrap-multilines": ["error", { "declaration": false, "assignment": false }],
    "react/no-access-state-in-setstate": "error", // Prevent using this.state inside this.setState
    "react/no-danger": "error", // Prevent usage of dangerous JSX properties
    "react/no-multi-comp": "off", // Prevent multiple component definition per file
    "react/no-this-in-sfc": "error", // Prevent using this in stateless functional components
    "react/prefer-stateless-function": "error", // Enforce stateless React Components to be written as a pure function
    "react/prop-types": "off",
    "react/require-default-props": "off", // error
    "react/forbid-prop-types": "off",
    "react/function-component-definition": [0, { "namedComponents": "function-expression" }]
  }
}
